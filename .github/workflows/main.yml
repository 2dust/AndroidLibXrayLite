name: Build

on:
  workflow_dispatch:
    inputs:
      release_tag:
        required: false
        type: string
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - develop

permissions:
  contents: read # Limit permissions to read-only for security

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run Linter
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run --timeout 5m

      - name: Run Tests # Run tests before final build to ensure code correctness
        run: go test ./... -v

  build:
    needs: test # This job runs after the test job is complete
    runs-on: ubuntu-latest

    env: # Define environment variables for use throughout the job
      ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      GO_BIN_PATH: $HOME/go/bin
      API_KEY: ${{ secrets.API_KEY }} # Example of using a secret

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: /home/runner/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Install gomobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@v0.0.0-20230911123456 # Use a specific version
        echo "$GO_BIN_PATH" >> $GITHUB_PATH

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r27
        add-to-path: true
        link-to-sdk: true
        local-cache: true

    - name: Restore Android Symlinks
      run: |
        directory="${{ env.ANDROID_NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        find "$directory" -type l | while read link; do
            current_target=$(readlink "$link")
            new_target="$directory/$(basename "$current_target")"
            ln -sf "$new_target" "$link"
            echo "Updated symlink for $(basename "$link") from $current_target to $new_target"
        done

    - name: Cache Build Output # Cache build output to speed up future builds
      uses: actions/cache@v3
      with:
        path: ./build_output # Path to your build output files (adjust as needed)
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Build Android Library
      run: |
         mkdir -p assets data
         bash gen_assets.sh download || { echo "Asset generation failed"; exit 1; }
         cp -v data/*.dat assets/
         gomobile init || { echo "Gomobile initialization failed"; exit 1; }
         go mod tidy || { echo "Go module tidy failed"; exit 1; }
         gomobile bind -v -androidapi 21 -trimpath -ldflags='-s -w -buildid=' ./ || { echo "Build failed"; exit 1; }

    - name: Upload Android Library to Release
      if: github.event.inputs.release_tag != ''
      uses: svenstaro/upload-release-action@v2
      with:
        file: ./libv2ray*r # Use wildcard to upload related files
        tag: ${{ github.event.inputs.release_tag }}
        file_glob: true

    - name: Notify Slack on Failure # Notify Slack if the build fails (optional)
      if: failure()
      uses: rtCamp/action-slack-notify@v2 
      with:
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: 'Build failed for ${{ github.ref }}'
